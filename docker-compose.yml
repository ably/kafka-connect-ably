version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0-2-ubi8
    container_name: zookeper
    networks:
      kafka_network:
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      zk_id: '1'
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: INFO
    # ports:
    #  - '2181:2181'

  kafka:
    image: confluentinc/cp-enterprise-kafka:7.4.0-2-ubi8
    hostname: kafka
    container_name: kafka
    networks:
      kafka_network:
        aliases:
          - kafka
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    volumes:
      - ./scripts/security/keypair:/tmp/conf
      - ./scripts/helper:/tmp/helper
      - ./scripts/security:/etc/kafka/secrets
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092, EXTERNAL_LISTENER://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, EXTERNAL_LISTENER://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, EXTERNAL_LISTENER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0-2-ubi8
    container_name: schema-registry
    networks:
      kafka_network:
        aliases:
          - schema-registry
    ports:
       - '8081:8081'
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: 'http://schema-registry:8081'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0-2-ubi8
    container_name: control-center
    networks:
      kafka_network:
        aliases:
          - control-center
    ports:
      - '19021:9021'
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_CONNECT_CLUSTER: 'connector:8083'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_CONFLUENT_CONTROLCENTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: INFO

  connector:
    container_name: connector
    build: .
    command:
      - /bin/connect-standalone
      - /config/docker-compose-worker.properties
      - /config/docker-compose-connector.properties
    volumes:
      - ./config:/config
    ports:
      - 5005:5005
      - 8083:8083
    environment:
      PORT: 5005
      SUSPEND: ${SUSPEND:-n}
      CONNECT_REST_PORT: 8083
      CONNECT_LISTENERS: 'http://:8083'
      CONNECT_REST_ADVERTISED_HOST_NAME: connector
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
    networks:
      kafka_network:
        aliases:
          - connector
    depends_on:
      - zookeeper
      - kafka
      - schema-registry

  collector:
    image: otel/opentelemetry-collector
    container_name: collector
    ports:
      - 4317:4317
      - 4318:4318
    volumes:
      - ./collector-config.yaml:/etc/otelcol/config.yaml
    networks:
      kafka_network:
        aliases:
          - collector

  # The test cli allows us to run tests with access the kafka nework
  # test-cli:
  #   image: cnfldemos/cp-server-connect-datagen:0.4.0-6.0.1
  #   tty: true
  #   working_dir: /opt/kafka-connect-ably
  #   command: /bin/bash # ./bin/debug.sh
  #   networks:
  #     kafka_network:
  #   ports:
  #     - '5005:5005'  # expose the debug port
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #     - schema-registry
  #     - control-center
  #   volumes:
  #     - "./:/opt/kafka-connect-ably"
  #   environment:
  #     CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components'

networks:
  kafka_network:
